# Give an appropriate description for the server stacks
Description: >
    Deoga Kofi / httpd Servers

# Declare parameters
Parameters:
  EnvironmentName:
      Description: Single Parameter that we are passing with the env name.
      Type: String
  ServiceName:
      Description: Name of Service
      Type: String
      Default: FargateService
  VpcIdSSM:
      Description: VPCID resolved from SSM
      Type: String
      Default: '{{resolve:ssm:/mmt/vpc/vpc_id:1}}' # Resolve parameter values
  PublicSubnetIdSSM:
      Description: PublicSubnetID list from SSM
      Type: AWS::SSM::Parameter::Value<List<String>>  #Convert the stringlist values to List
      Default: /mmt/subnets/public/subnet-ids
  PrivateSubnetIdSSM:
      Description: PrivateSubnetID lists from SSM
      Type: AWS::SSM::Parameter::Value<List<String>> #Convert the stringlist values to List
      Default: /mmt/subnets/private/subnet-ids
  Route53HostedZoneIdSSM:
      Description: Route53 hostedzoneID from SSM
      Type: String
      Default: '{{resolve:ssm:/mmt/dns/r53_zone_id:1}}' # Resolve parameter values
  Route53HostedZoneNameSSM:
      Description: Route53 Hostedzonename from SSM
      Type: String
      Default: '{{resolve:ssm:/mmt/dns/r53_zone_name:1}}' # Resolve parameter values
  AcmCertificateArn:
      Description: SSL certificate ARN from SSM
      Type: String
      Default: '{{resolve:ssm:/mmt/acm/tech_test_ssl_arn:1}}' # Resolve parameter values


# Declare resources for servers
Resources:

    # Create loadbalancer
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Scheme: internet-facing
          SecurityGroups: [!Ref ApplicationLoadBalancerSecurityGroup]
          Subnets: !Ref PublicSubnetIdSSM

          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} LoadBalancer

    # Create listener for loadbalancer through port 80
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
           Certificates:
            - CertificateArn: !Ref AcmCertificateArn
           DefaultActions:
             - Type: forward
               TargetGroupArn:
                 !Ref FargateAppTargetGroup
           LoadBalancerArn: !Ref LoadBalancer
           Port: 80
           Protocol: "HTTPS"


    # Create LoadBalancer listening rule to forward traffic
    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref FargateAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1


    # Create a TargetGroup for the loadblanacer healthchecks
    FargateAppTargetGroup:
      DependsOn: LoadBalancer
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 35
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 30
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: !Ref VpcIdSSM
        TargetType: ip
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} TargetGroup
    # Create Cluster
    Cluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: !Join ['', [!Ref ServiceName, Cluster]]
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Cluster
    # Create Task Definition for Fargate Service
    TaskDefinition:
      Type: AWS::ECS::TaskDefinition
      # Makes sure the log group is created before it is used.
      Properties:
        # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
        Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
        # awsvpc is required for Fargate
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        Cpu: '256'
        Memory: 0.5GB
        # A role needed by ECS.
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
        TaskRoleArn: !Ref TaskRole
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Task Definition
        ContainerDefinitions:
          - Name: !Ref ServiceName
            Image: httpd
            PortMappings:
              - ContainerPort: 80
            # Send logs to CloudWatch Logs
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Ref LogGroup
                awslogs-stream-prefix: ecs
    # Create a role needed by ECS
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} ExecutionRole
    # Create a role for the containers
    TaskRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: 'sts:AssumeRole'
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} TaskRole
    # Create a role for autoscaling containers
    AutoScalingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} AutoscalingRole
    # Create a security group for fargate containers
    FargateSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
        VpcId: !Ref VpcIdSSM
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} FargateSecurityGroup
    # Create a security group for loadbalancers
    ApplicationLoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: !Join ['', [!Ref ServiceName, LoadBalancerSecurityGroup]]
        VpcId: !Ref VpcIdSSM
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} ApplicationLoadBalancerSecurityGroup
    # Create fargate service to interact with containers
    FargateService:
      DependsOn: Listener
      Type: AWS::ECS::Service
      # This dependency is needed so that the load balancer is setup correctly in time
      Properties:
        ServiceName: !Ref ServiceName
        Cluster: !Ref Cluster
        TaskDefinition: !Ref TaskDefinition
        DeploymentConfiguration:
          MinimumHealthyPercent: 100
          MaximumPercent: 200
        DesiredCount: 3
        # This may need to be adjusted if the container takes a while to start up
        HealthCheckGracePeriodSeconds: 30
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            # change to DISABLED if you're using private subnets that have access to a NAT gateway
            AssignPublicIp: DISABLED
            Subnets: !Ref PrivateSubnetIdSSM
            SecurityGroups:
              - !Ref FargateSecurityGroup
        LoadBalancers:
          - ContainerName: !Ref ServiceName
            ContainerPort: 80
            TargetGroupArn: !Ref FargateAppTargetGroup
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} FargateService

    # Create loggroup for cloudwatch metrics
    LogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]

    #Create autoscaling target to link the taskdefnition to the service
    AutoScalingTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MinCapacity: 3
        MaxCapacity: 6
        ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt FargateService.Name]]
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs
        # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
        RoleARN: !GetAtt AutoScalingRole.Arn
    # Create autoscaling policy to manage scale in and scale out events
    AutoScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref AutoScalingTarget
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ECSServiceAverageCPUUtilization
          ScaleInCooldown: 3
          ScaleOutCooldown: 6
          # Keep things at or lower than 50% CPU utilization, for example
          TargetValue: 60
    # Create a DNS record to access loadbalancer through HTTPS
    DNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Ref Route53HostedZoneNameSSM
        Name: !Join ['', ['Fargate', ., !Ref Route53HostedZoneNameSSM, .]]
        Type: A
        AliasTarget:
          DNSName: !GetAtt LoadBalancer.DNSName
          HostedZoneId: !Ref Route53HostedZoneIdSSM

# Create outputs
Outputs:
    # Create output of DNS endpoint URL
    Endpoint:
        Description: Endpoint
        Value: !Join ['', ['https://', !Ref DNSRecord]]
